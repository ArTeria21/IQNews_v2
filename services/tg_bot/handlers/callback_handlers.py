"""–ú–æ–¥—É–ª—å —Å handlers –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""

from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext

from logger_setup import generate_correlation_id, setup_logger
from services.tg_bot.states.edit_profile import EditProfile
from services.tg_bot.texts import EDIT_ANTYPATHY_TEXT, EDIT_PREFERENCES_TEXT, HOW_TO_BECOME_PRO_TEXT
from services.tg_bot.config import ADMIN_USERNAME

logger = setup_logger(__name__)

router = Router()


@router.callback_query(F.data == "edit_preferences")
async def edit_preferences_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã"""
    correlation_id = generate_correlation_id()
    logger.info(
        "–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã", correlation_id=correlation_id
    )
    await callback.message.answer(EDIT_PREFERENCES_TEXT)
    await state.set_state(EditProfile.preferences)
    await state.update_data(correlation_id=correlation_id)


@router.callback_query(F.data == "edit_antipathy")
async def edit_antipathy_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω—Ç–∏–ø–∞—Ç–∏–∏"""
    correlation_id = generate_correlation_id()
    logger.info(
        "–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω—Ç–∏–ø–∞—Ç–∏–∏",
        correlation_id=correlation_id,
    )
    await callback.message.answer(EDIT_ANTYPATHY_TEXT)
    await state.set_state(EditProfile.antipathy)
    await state.update_data(correlation_id=correlation_id)

@router.callback_query(F.data == "How_to_become_pro")
async def how_to_become_pro_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ö–∞–∫ —Å—Ç–∞—Ç—å PRO? üòé"""
    await callback.message.answer(HOW_TO_BECOME_PRO_TEXT.format(admin_contact=ADMIN_USERNAME))